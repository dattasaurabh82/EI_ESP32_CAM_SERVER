name: Deploy webflasher to GitHub Pages

on:
  workflow_dispatch:
  workflow_run:
    workflows: ["Build"]
    types:
      - completed

permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  deploy:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for tags

      - name: Get latest tag version
        run: |
          # Try to get the latest tag
          LATEST_TAG=$(git tag --sort=-v:refname | head -n 1 || echo "")
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.1"  # Default if no tags
            echo "No tags found, using default: ${LATEST_TAG}"
          else
            echo "Found tag: ${LATEST_TAG}"
          fi
          echo "VERSION=${LATEST_TAG}" >> $GITHUB_ENV

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Prepare deployment files
        run: |
          echo "Current Files:"
          tree webflasher/
          echo ""
          # Delete old firmware directory in webflasher
          echo "Deleting old firmware dir ..."
          rm -rf webflasher/firmware
          tree webflasher/
          echo ""
          # Create firmware directory in webflasher
          echo "Creating new firmware dir ..."
          mkdir -p webflasher/firmware
          tree webflasher/
          echo ""
          # Copy the latest binary files
          echo "Copying latest firmwares from build/ to webflasher/firmware/"
          cp build/EI_ESP32_CAM_SERVER.xiaoesp32s3.merged.bin webflasher/firmware/
          cp build/EI_ESP32_CAM_SERVER.aithinkercam.merged.bin webflasher/firmware/
          cp build/EI_ESP32_CAM_SERVER.espeye.merged.bin webflasher/firmware/
          cp build/filesystem.littlefs.xiaoesp32s3.bin webflasher/firmware/
          cp build/filesystem.littlefs.aithinkercam.bin webflasher/firmware/
          p build/filesystem.littlefs.espeye.bin webflasher/firmware/
          ls -la webflasher/firmware/
          echo ""

      # Install build dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake build-essential

      # Build mklittlefs
      - name: Build mklittlefs
        run: |
          git clone --recursive https://github.com/earlephilhower/mklittlefs.git
          cd mklittlefs
          make dist
          sudo cp mklittlefs /usr/local/bin/
          cd ..
          mklittlefs --help

      - name: Debug firmware files
        run: |
          echo "Checking copied LittleFS binary contents:"
          mklittlefs -l -d 5 webflasher/firmware/filesystem.littlefs.xiaoesp32s3.bin
          klittlefs -l -d 5 webflasher/firmware/filesystem.littlefs.aithinkercam.bin
          klittlefs -l -d 5 webflasher/firmware/filesystem.littlefs.espeye.bin
          echo "Checking firmware directory contents and sizes:"
          ls -la webflasher/firmware/
          echo "MD5 checksums of binaries:"
          md5sum webflasher/firmware/*.bin

      - name: Update version in manifest.json files and index.html
        env:
          REPO_URL: ${{ github.server_url }}/${{ github.repository }}
        run: |
          echo "Current VERSION: ${{ env.VERSION }}"
          echo "Current REPO_URL: ${REPO_URL}"
          echo "Updated manifest.json files:"
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"${{ env.VERSION }}\"/" webflasher/manifest_xiao.json
          cat webflasher/manifest_xiao.json
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"${{ env.VERSION }}\"/" webflasher/manifest_aithinker.json
          cat webflasher/manifest_aithinker.json
          sed -i "s/\"version\": \"[^\"]*\"/\"version\": \"${{ env.VERSION }}\"/" webflasher/manifest_espeye.json
          cat webflasher/manifest_espeye.json
          echo ""
          # Update index.html
          # 1. Update version number
          if [[ ! -z "${{ env.VERSION }}" ]]; then
            sed -i "s|<span class=\"firmware-version\">.*</span>|<span class=\"firmware-version\">${{ env.VERSION }}</span>|g" webflasher/index.html
          else
            echo "Warning: Version is empty, using fallback"
            sed -i "s|<span class=\"firmware-version\">.*</span>|<span class=\"firmware-version\">v0.0.1</span>|g" webflasher/index.html
          fi
          echo "Updated index.html file:"
          cat webflasher/index.html

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./webflasher"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
